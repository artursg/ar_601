#!/usr/bin/env python
import rospy
from gazebo_msgs.msg import LinkStates
from sensor_msgs.msg import JointState
from std_msgs.msg import Float64
import numpy as np
import time

def set_publishers(pub):
    pub.append(rospy.Publisher('/control/joint_20/command', Float64, queue_size=10))
    pub.append(rospy.Publisher('/control/joint_19/command', Float64, queue_size=10))
    pub.append(rospy.Publisher('/control/joint_18/command', Float64, queue_size=10))
    pub.append(rospy.Publisher('/control/joint_17/command', Float64, queue_size=10))
    pub.append(rospy.Publisher('/control/joint_21/command', Float64, queue_size=10))

def set_down_position(pub,input_angles):
    rate = rospy.Rate(250)
    n=500
    for i in range(0,n+1):
        pub[0].publish((input_angles[0]*(n-i)/n) +  1.4*i/n)
        pub[1].publish((input_angles[1]*(n-i)/n) + 77.5*i/n)
        pub[2].publish((input_angles[2]*(n-i)/n) +   17*i/n)
        pub[3].publish((input_angles[3]*(n-i)/n) + 39.2*i/n)
        pub[4].publish((input_angles[4]*(n-i)/n) -  4.6*i/n)
        rate.sleep()
        #print input_angles[0]*(n-i)/n

def set_arm_1(pub):
    rate = rospy.Rate(250)
    n=500
    for i in range(0,n+1):
        pub[0].publish(( 1.4*(n-i)/n) - 94.6*i/n)
        pub[1].publish((77.5*(n-i)/n) + 35.7*i/n)
        pub[2].publish((  17*(n-i)/n) +  1.9*i/n)
        pub[3].publish((39.2*(n-i)/n) +   74*i/n)
        pub[4].publish((-4.6*(n-i)/n) +  0.8*i/n)
        rate.sleep()
        #print input_angles[0]*(n-i)/n

def set_arm_2(pub):
    rate = rospy.Rate(250)
    n=250
    for i in range(0,n+1):
        pub[0].publish((-94.6*(n-i)/n) - 94.6*i/n)
        pub[1].publish(( 35.7*(n-i)/n) + 35.7*i/n)
        pub[2].publish((  1.9*(n-i)/n) + 18.5*i/n)
        pub[3].publish((   74*(n-i)/n) + 91.1*i/n)
        pub[4].publish((  0.8*(n-i)/n) +  0.8*i/n)
        rate.sleep()
        #print input_angles[0]*(n-i)/n

def set_arm_3(pub):
    rate = rospy.Rate(250)
    n=250
    for i in range(0,n+1):
        pub[0].publish((-94.6*(n-i)/n) - 94.6*i/n)
        pub[1].publish(( 35.7*(n-i)/n) + 35.7*i/n)
        pub[2].publish(( 18.5*(n-i)/n) +  1.9*i/n)
        pub[3].publish(( 91.1*(n-i)/n) +   74*i/n)
        pub[4].publish((  0.8*(n-i)/n) +  0.8*i/n)
        rate.sleep()
        #print input_angles[0]*(n-i)/n

def set_back_to_down(pub):
    rate = rospy.Rate(250)
    n=500
    for i in range(0,n+1):
        pub[0].publish((-94.6*(n-i)/n) +  1.4*i/n)
        pub[1].publish(( 35.7*(n-i)/n) + 77.5*i/n)
        pub[2].publish((  1.9*(n-i)/n) +   17*i/n)
        pub[3].publish((   74*(n-i)/n) + 39.2*i/n)
        pub[4].publish((  0.8*(n-i)/n) -  4.6*i/n)
        rate.sleep()
        #print input_angles[0]*(n-i)/n

def privet_right():
    rospy.init_node('privet_right', anonymous=True)
    msg=rospy.wait_for_message("/joint_states", JointState)
    initial_angles = []
    initial_angles.append(msg.position[15])
    initial_angles.append(msg.position[14])
    initial_angles.append(msg.position[13])
    initial_angles.append(msg.position[12])
    initial_angles.append(msg.position[16])
    #print initial_angles
    global pub
    pub=[]
    set_publishers(pub)
    set_down_position(pub,initial_angles)
    set_arm_1(pub)
    for i in range(0,2):
    	set_arm_2(pub)
    	set_arm_3(pub)
    set_back_to_down(pub)

if __name__ == '__main__':
    try:

        privet_right()
        
    except rospy.ROSInterruptException:
        pass
